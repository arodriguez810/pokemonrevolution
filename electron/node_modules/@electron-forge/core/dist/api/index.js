"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ForgeMakeResult", {
  enumerable: true,
  get: function () {
    return _sharedTypes.ForgeMakeResult;
  }
});
Object.defineProperty(exports, "ImportOptions", {
  enumerable: true,
  get: function () {
    return _import2.ImportOptions;
  }
});
Object.defineProperty(exports, "InitOptions", {
  enumerable: true,
  get: function () {
    return _init.InitOptions;
  }
});
Object.defineProperty(exports, "InstallOptions", {
  enumerable: true,
  get: function () {
    return _install.InstallOptions;
  }
});
Object.defineProperty(exports, "InstallAsset", {
  enumerable: true,
  get: function () {
    return _install.Asset;
  }
});
Object.defineProperty(exports, "LintOptions", {
  enumerable: true,
  get: function () {
    return _lint.LintOptions;
  }
});
Object.defineProperty(exports, "MakeOptions", {
  enumerable: true,
  get: function () {
    return _make.MakeOptions;
  }
});
Object.defineProperty(exports, "PackageOptions", {
  enumerable: true,
  get: function () {
    return _package2.PackageOptions;
  }
});
Object.defineProperty(exports, "PublishOptions", {
  enumerable: true,
  get: function () {
    return _publish.PublishOptions;
  }
});
Object.defineProperty(exports, "StartOptions", {
  enumerable: true,
  get: function () {
    return _start.StartOptions;
  }
});
exports.utils = exports.api = exports.ForgeAPI = void 0;

require("source-map-support/register");

require("colors");

var _sharedTypes = require("@electron-forge/shared-types");

var _import2 = _interopRequireWildcard(require("./import"));

var _init = _interopRequireWildcard(require("./init"));

var _install = _interopRequireWildcard(require("./install"));

var _lint = _interopRequireWildcard(require("./lint"));

var _make = _interopRequireWildcard(require("./make"));

var _package2 = _interopRequireWildcard(require("./package"));

var _publish = _interopRequireWildcard(require("./publish"));

var _start = _interopRequireWildcard(require("./start"));

var _util = _interopRequireDefault(require("../util"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ForgeAPI {
  /**
   * Attempt to import a given module directory to the Electron Forge standard.
   *
   * * Sets up `git` and the correct NPM dependencies
   * * Adds a template forge config to `package.json`
   */
  import(opts) {
    return (0, _import2.default)(opts);
  }
  /**
   * Initialize a new Electron Forge template project in the given directory.
   */


  init(opts) {
    return (0, _init.default)(opts);
  }
  /**
   * Install an Electron application from GitHub.
   *
   * Works on all three platforms for all major distributable types.
   */


  install(opts) {
    return (0, _install.default)(opts);
  }
  /**
   * Lint a local Electron application.
   *
   * The promise will be rejected with the stdout+stderr of the linting process
   * if linting fails or will be resolved if it succeeds.
   */


  lint(opts) {
    return (0, _lint.default)(opts);
  }
  /**
   * Make distributables for an Electron application
   */


  make(opts) {
    return (0, _make.default)(opts);
  }
  /**
   * Resolves hooks if they are a path to a file (instead of a `Function`)
   */


  package(opts) {
    return (0, _package2.default)(opts);
  }
  /**
   * Publish an Electron application into the given target service
   */


  publish(opts) {
    return (0, _publish.default)(opts);
  }
  /**
   * Start an Electron application.
   *
   * Handles things like native module rebuilding for you on the fly
   */


  start(opts) {
    return (0, _start.default)(opts);
  }

}

exports.ForgeAPI = ForgeAPI;
const api = new ForgeAPI();
exports.api = api;
const utils = new _util.default();
exports.utils = utils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvaW5kZXgudHMiXSwibmFtZXMiOlsiRm9yZ2VBUEkiLCJpbXBvcnQiLCJvcHRzIiwiaW5pdCIsImluc3RhbGwiLCJsaW50IiwibWFrZSIsInBhY2thZ2UiLCJwdWJsaXNoIiwic3RhcnQiLCJhcGkiLCJ1dGlscyIsIkZvcmdlVXRpbHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOzs7Ozs7OztBQUVPLE1BQU1BLFFBQU4sQ0FBZTtBQUNwQjs7Ozs7O0FBTUFDLEVBQUFBLE1BQU0sQ0FBQ0MsSUFBRCxFQUFzQjtBQUMxQixXQUFPLHNCQUFRQSxJQUFSLENBQVA7QUFDRDtBQUVEOzs7OztBQUdBQyxFQUFBQSxJQUFJLENBQUNELElBQUQsRUFBb0I7QUFDdEIsV0FBTyxtQkFBS0EsSUFBTCxDQUFQO0FBQ0Q7QUFFRDs7Ozs7OztBQUtBRSxFQUFBQSxPQUFPLENBQUNGLElBQUQsRUFBdUI7QUFDNUIsV0FBTyxzQkFBUUEsSUFBUixDQUFQO0FBQ0Q7QUFFRDs7Ozs7Ozs7QUFNQUcsRUFBQUEsSUFBSSxDQUFDSCxJQUFELEVBQW9CO0FBQ3RCLFdBQU8sbUJBQUtBLElBQUwsQ0FBUDtBQUNEO0FBRUQ7Ozs7O0FBR0FJLEVBQUFBLElBQUksQ0FBQ0osSUFBRCxFQUFvQjtBQUN0QixXQUFPLG1CQUFLQSxJQUFMLENBQVA7QUFDRDtBQUVEOzs7OztBQUdBSyxFQUFBQSxPQUFPLENBQUNMLElBQUQsRUFBdUI7QUFDNUIsV0FBTyx1QkFBU0EsSUFBVCxDQUFQO0FBQ0Q7QUFFRDs7Ozs7QUFHQU0sRUFBQUEsT0FBTyxDQUFDTixJQUFELEVBQXVCO0FBQzVCLFdBQU8sc0JBQVFBLElBQVIsQ0FBUDtBQUNEO0FBRUQ7Ozs7Ozs7QUFLQU8sRUFBQUEsS0FBSyxDQUFDUCxJQUFELEVBQXFCO0FBQ3hCLFdBQU8sb0JBQU1BLElBQU4sQ0FBUDtBQUNEOztBQWpFbUI7OztBQXFFdEIsTUFBTVEsR0FBRyxHQUFHLElBQUlWLFFBQUosRUFBWjs7QUFDQSxNQUFNVyxLQUFLLEdBQUcsSUFBSUMsYUFBSixFQUFkIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdjb2xvcnMnO1xuaW1wb3J0IHsgRm9yZ2VNYWtlUmVzdWx0IH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL3NoYXJlZC10eXBlcyc7XG5cbmltcG9ydCBfaW1wb3J0LCB7IEltcG9ydE9wdGlvbnMgfSBmcm9tICcuL2ltcG9ydCc7XG5pbXBvcnQgaW5pdCwgeyBJbml0T3B0aW9ucyB9IGZyb20gJy4vaW5pdCc7XG5pbXBvcnQgaW5zdGFsbCwgeyBJbnN0YWxsT3B0aW9ucywgQXNzZXQgYXMgSW5zdGFsbEFzc2V0IH0gZnJvbSAnLi9pbnN0YWxsJztcbmltcG9ydCBsaW50LCB7IExpbnRPcHRpb25zIH0gZnJvbSAnLi9saW50JztcbmltcG9ydCBtYWtlLCB7IE1ha2VPcHRpb25zIH0gZnJvbSAnLi9tYWtlJztcbmltcG9ydCBfcGFja2FnZSwgeyBQYWNrYWdlT3B0aW9ucyB9IGZyb20gJy4vcGFja2FnZSc7XG5pbXBvcnQgcHVibGlzaCwgeyBQdWJsaXNoT3B0aW9ucyB9IGZyb20gJy4vcHVibGlzaCc7XG5pbXBvcnQgc3RhcnQsIHsgU3RhcnRPcHRpb25zIH0gZnJvbSAnLi9zdGFydCc7XG5cbmltcG9ydCBGb3JnZVV0aWxzIGZyb20gJy4uL3V0aWwnO1xuXG5leHBvcnQgY2xhc3MgRm9yZ2VBUEkge1xuICAvKipcbiAgICogQXR0ZW1wdCB0byBpbXBvcnQgYSBnaXZlbiBtb2R1bGUgZGlyZWN0b3J5IHRvIHRoZSBFbGVjdHJvbiBGb3JnZSBzdGFuZGFyZC5cbiAgICpcbiAgICogKiBTZXRzIHVwIGBnaXRgIGFuZCB0aGUgY29ycmVjdCBOUE0gZGVwZW5kZW5jaWVzXG4gICAqICogQWRkcyBhIHRlbXBsYXRlIGZvcmdlIGNvbmZpZyB0byBgcGFja2FnZS5qc29uYFxuICAgKi9cbiAgaW1wb3J0KG9wdHM6IEltcG9ydE9wdGlvbnMpIHtcbiAgICByZXR1cm4gX2ltcG9ydChvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIGEgbmV3IEVsZWN0cm9uIEZvcmdlIHRlbXBsYXRlIHByb2plY3QgaW4gdGhlIGdpdmVuIGRpcmVjdG9yeS5cbiAgICovXG4gIGluaXQob3B0czogSW5pdE9wdGlvbnMpIHtcbiAgICByZXR1cm4gaW5pdChvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnN0YWxsIGFuIEVsZWN0cm9uIGFwcGxpY2F0aW9uIGZyb20gR2l0SHViLlxuICAgKlxuICAgKiBXb3JrcyBvbiBhbGwgdGhyZWUgcGxhdGZvcm1zIGZvciBhbGwgbWFqb3IgZGlzdHJpYnV0YWJsZSB0eXBlcy5cbiAgICovXG4gIGluc3RhbGwob3B0czogSW5zdGFsbE9wdGlvbnMpIHtcbiAgICByZXR1cm4gaW5zdGFsbChvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaW50IGEgbG9jYWwgRWxlY3Ryb24gYXBwbGljYXRpb24uXG4gICAqXG4gICAqIFRoZSBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc3Rkb3V0K3N0ZGVyciBvZiB0aGUgbGludGluZyBwcm9jZXNzXG4gICAqIGlmIGxpbnRpbmcgZmFpbHMgb3Igd2lsbCBiZSByZXNvbHZlZCBpZiBpdCBzdWNjZWVkcy5cbiAgICovXG4gIGxpbnQob3B0czogTGludE9wdGlvbnMpIHtcbiAgICByZXR1cm4gbGludChvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlIGRpc3RyaWJ1dGFibGVzIGZvciBhbiBFbGVjdHJvbiBhcHBsaWNhdGlvblxuICAgKi9cbiAgbWFrZShvcHRzOiBNYWtlT3B0aW9ucykge1xuICAgIHJldHVybiBtYWtlKG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIGhvb2tzIGlmIHRoZXkgYXJlIGEgcGF0aCB0byBhIGZpbGUgKGluc3RlYWQgb2YgYSBgRnVuY3Rpb25gKVxuICAgKi9cbiAgcGFja2FnZShvcHRzOiBQYWNrYWdlT3B0aW9ucykge1xuICAgIHJldHVybiBfcGFja2FnZShvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaXNoIGFuIEVsZWN0cm9uIGFwcGxpY2F0aW9uIGludG8gdGhlIGdpdmVuIHRhcmdldCBzZXJ2aWNlXG4gICAqL1xuICBwdWJsaXNoKG9wdHM6IFB1Ymxpc2hPcHRpb25zKSB7XG4gICAgcmV0dXJuIHB1Ymxpc2gob3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgYW4gRWxlY3Ryb24gYXBwbGljYXRpb24uXG4gICAqXG4gICAqIEhhbmRsZXMgdGhpbmdzIGxpa2UgbmF0aXZlIG1vZHVsZSByZWJ1aWxkaW5nIGZvciB5b3Ugb24gdGhlIGZseVxuICAgKi9cbiAgc3RhcnQob3B0czogU3RhcnRPcHRpb25zKSB7XG4gICAgcmV0dXJuIHN0YXJ0KG9wdHMpO1xuICB9XG59XG5cblxuY29uc3QgYXBpID0gbmV3IEZvcmdlQVBJKCk7XG5jb25zdCB1dGlscyA9IG5ldyBGb3JnZVV0aWxzKCk7XG5cbmV4cG9ydCB7XG4gIEZvcmdlTWFrZVJlc3VsdCxcbiAgSW1wb3J0T3B0aW9ucyxcbiAgSW5pdE9wdGlvbnMsXG4gIEluc3RhbGxBc3NldCxcbiAgSW5zdGFsbE9wdGlvbnMsXG4gIExpbnRPcHRpb25zLFxuICBNYWtlT3B0aW9ucyxcbiAgUGFja2FnZU9wdGlvbnMsXG4gIFB1Ymxpc2hPcHRpb25zLFxuICBTdGFydE9wdGlvbnMsXG4gIGFwaSxcbiAgdXRpbHMsXG59O1xuIl19