"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = upgradeForgeConfig;
exports.updateUpgradedForgeDevDeps = updateUpgradedForgeDevDeps;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _initNpm = require("../api/init-scripts/init-npm");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mapMakeTargets(forge5Config) {
  const makeTargets = new Map();

  if (forge5Config.makeTargets) {
    for (const [platform, targets] of Object.entries(forge5Config.makeTargets)) {
      for (const target of targets) {
        let platforms = makeTargets.get(target);

        if (platforms === undefined) {
          platforms = [];
          makeTargets.set(target, platforms);
        }

        platforms.push(platform);
      }
    }
  }

  return makeTargets;
}

const forge5MakerMappings = new Map([['electronInstallerDebian', 'deb'], ['electronInstallerDMG', 'dmg'], ['electronInstallerFlatpak', 'flatpak'], ['electronInstallerRedhat', 'rpm'], ['electronInstallerSnap', 'snap'], ['electronWinstallerConfig', 'squirrel'], ['electronWixMSIConfig', 'wix'], ['windowsStoreConfig', 'appx']]);
/**
 * Converts Forge v5 maker config to v6.
 */

function generateForgeMakerConfig(forge5Config) {
  const makeTargets = mapMakeTargets(forge5Config);
  const makers = [];

  for (const [forge5Key, makerType] of forge5MakerMappings) {
    const config = forge5Config[forge5Key];

    if (config) {
      makers.push({
        name: `@electron-forge/maker-${makerType}`,
        config: forge5Config[forge5Key],
        platforms: makeTargets.get(makerType) || null
      });
    }
  }

  const zipPlatforms = makeTargets.get('zip');

  if (zipPlatforms) {
    makers.push({
      name: '@electron-forge/maker-zip',
      platforms: zipPlatforms
    });
  }

  return makers;
}

const forge5PublisherMappings = new Map([['github_repository', 'github'], ['s3', 's3'], ['electron-release-server', 'electron-release-server'], ['snapStore', 'snapcraft']]);
/**
 * Transforms v5 GitHub publisher config to v6 syntax.
 */

function transformGitHubPublisherConfig(config) {
  const {
    name,
    owner,
    options,
    ...gitHubConfig
  } = config;
  gitHubConfig.repository = {
    name,
    owner
  };

  if (options) {
    gitHubConfig.octokitOptions = options;
  }

  return gitHubConfig;
}
/**
 * Converts Forge v5 publisher config to v6.
 */


function generateForgePublisherConfig(forge5Config) {
  const publishers = [];

  for (const [forge5Key, publisherType] of forge5PublisherMappings) {
    let config = forge5Config[forge5Key];

    if (config) {
      if (publisherType === 'github') {
        config = transformGitHubPublisherConfig(config);
      }

      publishers.push({
        config,
        name: `@electron-forge/publisher-${publisherType}`,
        platforms: null
      });
    }
  }

  return publishers;
}
/**
 * Upgrades Forge v5 config to v6.
 */


function upgradeForgeConfig(forge5Config) {
  const forgeConfig = {};

  if (forge5Config.electronPackagerConfig) {
    delete forge5Config.electronPackagerConfig.packageManager;
    forgeConfig.packagerConfig = forge5Config.electronPackagerConfig;
  }

  if (forge5Config.electronRebuildConfig) {
    forgeConfig.electronRebuildConfig = forge5Config.electronRebuildConfig;
  }

  forgeConfig.makers = generateForgeMakerConfig(forge5Config);
  forgeConfig.publishers = generateForgePublisherConfig(forge5Config);
  return forgeConfig;
}

function updateUpgradedForgeDevDeps(packageJSON, devDeps) {
  const forgeConfig = packageJSON.config.forge;
  devDeps = devDeps.filter(dep => !dep.startsWith('@electron-forge/maker-')); // eslint-disable-next-line max-len

  devDeps = devDeps.concat(forgeConfig.makers.map(maker => (0, _initNpm.siblingDep)(_path.default.basename(maker.name)))); // eslint-disable-next-line max-len

  devDeps = devDeps.concat(forgeConfig.publishers.map(publisher => (0, _initNpm.siblingDep)(_path.default.basename(publisher.name))));

  if (Object.keys(packageJSON.devDependencies).find(dep => dep === 'electron-prebuilt-compile')) {
    devDeps = devDeps.concat((0, _initNpm.siblingDep)('plugin-compile'));
  }

  return devDeps;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,